@using RegTesting.Contracts
@model RegTesting.Contracts.ErrorOccurrence

<div class="list-group-item">
		   
	<div class="bs-callout bs-callout-danger"><b>@Model.Error.Message</b>
		<small>
			<span>
				<a class="hideable">Stacktrace</a>
				<span class="box" style="display: none"><br/>
															
					@Model.Error.Type  @Html.Raw(@Model.Error.StackTrace.Replace(" at ", "<br>at "))
					@if (Model.Error.InnerException != null)
					{
						<br /><text>InnerException: @Model.Error.InnerException</text>
					}
				</span>
			</span>
		</small>
	</div>
					
	<table class="table table-hover">
		<tr>
			<th>Browser</th>
			<th>Language</th>
			<th>Time</th>
			<th>Error Occurence</th>
		</tr>

		@for (int index = 0; index < Model.LstOccurence.Count; index++)
		{
			String classes = "";
			OccurrenceElement occurrenceElement = Model.LstOccurence[index];
		  
			<tr class="@(classes + " toggle")">
				<td>@occurrenceElement.Browser.Name</td>
			   <td>@occurrenceElement.Language.Languagecode</td>
				<td>@occurrenceElement.DateTime</td>
				<td>
					@if (occurrenceElement.ErrorCount.HasValue && occurrenceElement.ErrorSince.HasValue)
					{
						<text>Failed <b>@occurrenceElement.ErrorCount</b> times since <b>@occurrenceElement.ErrorSince</b></text>
					}
					 else if (occurrenceElement.ErrorCount.HasValue)
					 {
						 <text><b>Never succeeded!</b> Already failed <b>@occurrenceElement.ErrorCount</b> times.</text>
					 }
					<span class="glyphicon glyphicon-chevron-down pull-right"></span>
				</td>
			</tr>
			<tr  style="display: none">
				<td>@if (!String.IsNullOrEmpty(occurrenceElement.ScreenshotFile))
					{
						<a class="btn btn-xs" href="@("/screenshots/" + occurrenceElement.ScreenshotFile)" target="_blank"><img class="testscreenshot" src="@("/screenshots/" + occurrenceElement.ScreenshotFile)"/></a>
					}</td>
				<td colspan="3"><pre class="detaillog">@Html.Raw(occurrenceElement.DetailLog)</pre>
				</td>
			</tr>
		}
	</table>
		
</div>


